<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Cci.MetadataHelper</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Cci.AttributeHelper">
            <summary>
            Class conraining helper routines for Attributes
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AttributeHelper.IsAttributeType(Microsoft.Cci.ITypeDefinition)">
            <summary>
            Returns true if the type definition is an attribute. Typedefinition is said to be attribute when it inherits from [mscorlib]System.Attribute
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AttributeHelper.Contains(System.Collections.Generic.IEnumerable{Microsoft.Cci.ICustomAttribute},Microsoft.Cci.ITypeReference)">
            <summary>
            Returns true if the given collection of attributes contains an attribute of the given type.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AttributeHelper.AllowMultiple(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.INameTable)">
            <summary>
            Specifies whether more than one instance of this type of attribute is allowed on same element.
            This information is obtained from an attribute on the attribute type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AttributeHelper.Inherited(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.INameTable)">
            <summary>
            Specifies whether this attribute applies to derived types and/or overridden methods.
            This information is obtained from an attribute on the attribute type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AttributeHelper.ValidOn(Microsoft.Cci.ITypeDefinition)">
            <summary>
            Specifies the symbol table elements on which it is valid to apply this attribute.
            This information is obtained from an attribute on the attribute type definition.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MetadataHostEnvironment">
            <summary>
            Provides a standard abstraction over the applications that host components that provide or consume objects from the metadata model.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.#ctor(Microsoft.Cci.INameTable,System.Byte)">
            <summary>
            Allocates an object that provides an abstraction over the application hosting compilers based on this framework.
            </summary>
            <param name="nameTable">
            A collection of IName instances that represent names that are commonly used during compilation.
            This is a provided as a parameter to the host environment in order to allow more than one host
            environment to co-exist while agreeing on how to map strings to IName instances.
            </param>
            <param name="pointerSize">The size of a pointer on the runtime that is the target of the metadata units to be loaded
            into this metadta host. This parameter only matters if the host application wants to work out what the exact layout
            of a struct will be on the target runtime. The framework uses this value in methods such as TypeHelper.SizeOfType and
            TypeHelper.TypeAlignment. If the host application does not care about the pointer size it can provide 0 as the value
            of this parameter. In that case, the first reference to IMetadataHost.PointerSize will probe the list of loaded assemblies
            to find an assembly that either requires 32 bit pointers or 64 bit pointers. If no such assembly is found, the default is 32 bit pointers.
            </param>
        </member>
        <member name="E:Microsoft.Cci.MetadataHostEnvironment.Errors">
            <summary>
            The errors reported by this event are discovered in background threads by an opend ended
            set of error reporters. Listeners to this event should thus be prepared to be called at abitrary times from arbitrary threads.
            Each occurrence of the event concerns a particular source location and a particular error reporter.
            The reported error collection (possibly empty) supercedes any errors previously reported by the same error reporter for the same source location.
            A source location can be an entire ISourceDocument, or just a part of it (the latter would apply to syntax errors discovered by an incremental
            parser after an edit to the source document).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MetadataHostEnvironment.ContractAssemblySymbolicIdentity">
            <summary>
            The identity of the assembly containing Microsoft.Contracts.Contract.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.GetContractAssemblySymbolicIdentity">
            <summary>
            Returns the identity of the assembly containing the Microsoft.Contracts.Contract, by asking
            each of the loaded units for its opinion on the matter and returning the opinion with the highest version number.
            If none of the loaded units have an opinion, the result is the same as CoreAssemblySymbolicIdentity.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MetadataHostEnvironment.CoreAssemblySymbolicIdentity">
            <summary>
            The identity of the assembly containing the core system types such as System.Object.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.GetCoreAssemblySymbolicIdentity">
            <summary>
            Returns the identity of the assembly containing the core system types such as System.Object, by asking
            each of the loaded units for its opinion on the matter and returning the opinion with the highest version number.
            If none of the loaded units have an opinion, the identity of the runtime executing the compiler itself is returned.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.FindAssembly(Microsoft.Cci.AssemblyIdentity)">
            <summary>
            Finds the assembly that matches the given identifier among the already loaded set of assemblies,
            or a dummy assembly if no matching assembly can be found.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.FindModule(Microsoft.Cci.ModuleIdentity)">
            <summary>
            Finds the module that matches the given identifier among the already loaded set of modules,
            or a dummy module if no matching module can be found.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.FindUnit(Microsoft.Cci.UnitIdentity)">
            <summary>
            Finds the unit that matches the given identifier, or a dummy unit if no matching unit can be found.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MetadataHostEnvironment.InternFactory">
            <summary>
            Returns the intern factory.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.LoadAssembly(Microsoft.Cci.AssemblyIdentity)">
            <summary>
            The assembly that matches the given reference, or a dummy assembly if no matching assembly can be found.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.LoadModule(Microsoft.Cci.ModuleIdentity)">
            <summary>
            The module that matches the given reference, or a dummy module if no matching module can be found.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.LoadUnit(Microsoft.Cci.UnitIdentity)">
            <summary>
            The unit that matches the given identity, or a dummy unit if no matching unit can be found.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.LoadUnitFrom(System.String)">
            <summary>
            Returns the unit that is stored at the given location, or a dummy unit if no unit exists at that location or if the unit at that location is not accessible.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MetadataHostEnvironment.LoadedUnits">
            <summary>
            Returns enumeration of all the units loaded so far.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MetadataHostEnvironment.NameTable">
            <summary>
            A table used to intern strings used as names.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MetadataHostEnvironment.PlatformType">
            <summary>
            A collection of references to types from the core platform, such as System.Object and System.String.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.GetPlatformType">
            <summary>
            Returns an object that provides a collection of references to types from the core platform, such as System.Object and System.String.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MetadataHostEnvironment.PointerSize">
            <summary>
            The size (in bytes) of a pointer on the platform on which the host is targetting.
            The value of this property is either 4 (32-bits) or 8 (64-bit).
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.GetTargetPlatformPointerSize">
            <summary>
            Returns an opinion about the size of a pointer on the target runtime for the set of modules
            currently in this.unitCache. If none of the modules requires either 32 bit pointers or 64 bit pointers
            the result is 4 (i.e. 32 bit pointers). This method is only called if a host application has not
            explicitly provided the pointer size of the target platform.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.RegisterAsLatest(Microsoft.Cci.IUnit)">
            <summary>
            Registers the given unit as the latest one associated with the unit's location.
            Such units can then be discovered by clients via GetUnit.
            </summary>
            <param name="unit">The unit to register.</param>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.ReportErrors(Microsoft.Cci.ErrorEventArgs)">
            <summary>
            Raises the CompilationErrors event with the given error event arguments.
            The event is raised on a separate thread.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.SynchronousReportErrors(System.Object)">
             <summary>
            
             </summary>
             <param name="state"></param>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.ReportError(Microsoft.Cci.IErrorMessage)">
            <summary>
            Raises the CompilationErrors event with the given error wrapped up in an error event arguments object.
            The event is raised on a separate thread.
            </summary>
            <param name="error">The error to report.</param>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.ProbeAssemblyReference(Microsoft.Cci.IUnit,Microsoft.Cci.AssemblyIdentity)">
            <summary>
            Default implementation of UnifyAssemblyReference. Override this method to change the behaviour.
            </summary>
            <param name="referringUnit"></param>
            <param name="referencedAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.ProbeModuleReference(Microsoft.Cci.IUnit,Microsoft.Cci.ModuleIdentity)">
            <summary>
            Default implementation of UnifyModuleReference. Override this method to change the behaviour.
            </summary>
            <param name="referringUnit"></param>
            <param name="referencedModule"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MetadataHostEnvironment.UnifyAssembly(Microsoft.Cci.AssemblyIdentity)">
            <summary>
            Default implementation of UnifyAssembly. Override this method to change the behaviour.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.GlobalLock">
            <summary>
            Static class encasulating the global lock object.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.GlobalLock.LockingObject">
            <summary>
            All synchronization code should exclusively use this lock object,
            hence making it trivial to ensure that there are no deadlocks.
            It also means that the lock should never be held for long.
            In particular, no code holding this lock should ever wait on another thread.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.IMetadataReaderHost">
            <summary>
            An interface provided by the application hosting the metadata reader. The interface allows the host application
            to control how assembly references are unified, where files are found and so on.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.IMetadataReaderHost.OpenBinaryDocument(Microsoft.Cci.IBinaryDocument)">
            <summary>
            Open the binary document as a memory block in host dependent fashion.
            </summary>
            <param name="sourceDocument">The binary document that is to be opened.</param>
            <returns>The unmanaged memory block corresponding to the source document.</returns>
        </member>
        <member name="M:Microsoft.Cci.IMetadataReaderHost.OpenBinaryDocument(Microsoft.Cci.IBinaryDocument,System.String)">
            <summary>
            Open the child binary document within the context of parent source document.as a memory block in host dependent fashion
            For example: in multimodule assemblies the main module will be parentSourceDocument, where as other modules will be child
            docuements.
            </summary>
            <param name="parentSourceDocument">The source document indicating the child document location.</param>
            <param name="childDocumentName">The name of the child document.</param>
            <returns>The unmanaged memory block corresponding to the child document.</returns>
        </member>
        <member name="M:Microsoft.Cci.IMetadataReaderHost.ResolvingAssemblyReference(Microsoft.Cci.IUnit,Microsoft.Cci.AssemblyIdentity)">
            <summary>
            This method is called when the assebly reference is being resolved and its not already loaded by the host.
            </summary>
            <param name="referringUnit">The unit that is referencing the assembly.</param>
            <param name="referencedAssembly">Assembly identifier for the assembly being referenced.</param>
        </member>
        <member name="M:Microsoft.Cci.IMetadataReaderHost.ResolvingModuleReference(Microsoft.Cci.IUnit,Microsoft.Cci.ModuleIdentity)">
            <summary>
            This method is called when the module reference is being resolved and its not already loaded by the host.
            </summary>
            <param name="referringUnit">The unit that is referencing the module.</param>
            <param name="referencedModule">Module identifier for the assembly being referenced.</param>
        </member>
        <member name="T:Microsoft.Cci.MetadataReaderHost">
            <summary>
            A base class for an object provided by the application hosting the metadata reader. The object allows the host application
            to control how assembly references are unified, where files are found and so on.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataReaderHost.#ctor">
            <summary>
            Allocates an object that provides an abstraction over the application hosting compilers based on this framework.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MetadataReaderHost.#ctor(Microsoft.Cci.INameTable)">
            <summary>
            Allocates an object that provides an abstraction over the application hosting compilers based on this framework.
            </summary>
            <param name="nameTable">
            A collection of IName instances that represent names that are commonly used during compilation.
            This is a provided as a parameter to the host environment in order to allow more than one host
            environment to co-exist while agreeing on how to map strings to IName instances.
            </param>
        </member>
        <member name="M:Microsoft.Cci.MetadataReaderHost.#ctor(Microsoft.Cci.INameTable,System.Byte)">
            <summary>
            Allocates an object that provides an abstraction over the application hosting compilers based on this framework.
            </summary>
            <param name="nameTable">
            A collection of IName instances that represent names that are commonly used during compilation.
            This is a provided as a parameter to the host environment in order to allow more than one host
            environment to co-exist while agreeing on how to map strings to IName instances.
            </param>
            <param name="pointerSize">The size of a pointer on the runtime that is the target of the metadata units to be loaded
            into this metadta host. This parameter only matters if the host application wants to work out what the exact layout
            of a struct will be on the target runtime. The framework uses this value in methods such as TypeHelper.SizeOfType and
            TypeHelper.TypeAlignment. If the host application does not care about the pointer size it can provide 0 as the value
            of this parameter. In that case, the first reference to IMetadataHost.PointerSize will probe the list of loaded assemblies
            to find an assembly that either requires 32 bit pointers or 64 bit pointers. If no such assembly is found, the default is 32 bit pointers.
            </param>
        </member>
        <member name="M:Microsoft.Cci.MetadataReaderHost.OpenBinaryDocument(Microsoft.Cci.IBinaryDocument)">
            <summary>
            Open the binary document as a memory block in host dependent fashion.
            </summary>
            <param name="sourceDocument">The binary document that is to be opened.</param>
            <returns>The unmanaged memory block corresponding to the source document.</returns>
        </member>
        <member name="M:Microsoft.Cci.MetadataReaderHost.OpenBinaryDocument(Microsoft.Cci.IBinaryDocument,System.String)">
            <summary>
            Open the child binary document within the context of parent source document.as a memory block in host dependent fashion
            For example: in multimodule assemblies the main module will be parentSourceDocument, where as other modules will be child
            docuements.
            </summary>
            <param name="parentSourceDocument">The source document indicating the child document location.</param>
            <param name="childDocumentName">The name of the child document.</param>
            <returns>The unmanaged memory block corresponding to the child document.</returns>
        </member>
        <member name="M:Microsoft.Cci.MetadataReaderHost.ResolvingAssemblyReference(Microsoft.Cci.IUnit,Microsoft.Cci.AssemblyIdentity)">
            <summary>
            This method is called when the assebly reference is being resolved and its not already loaded by the Read/Write host.
            </summary>
            <param name="referringUnit">The unit that is referencing the assembly.</param>
            <param name="referencedAssembly">Assembly identity for the assembly being referenced.</param>
        </member>
        <member name="M:Microsoft.Cci.MetadataReaderHost.ResolvingModuleReference(Microsoft.Cci.IUnit,Microsoft.Cci.ModuleIdentity)">
            <summary>
            This method is called when the module reference is being resolved and its not already loaded by the Read/Write host.
            </summary>
            <param name="referringUnit">The unit that is referencing the module.</param>
            <param name="referencedModule">Module identity for the assembly being referenced.</param>
        </member>
        <member name="M:Microsoft.Cci.InternFactory.GetGenericMethodParameterReferenceInternId(Microsoft.Cci.IMethodReference,System.UInt32)">
            <summary>
            Returns the interned key for the generic method parameter constructed with the given index
            </summary>
            <param name="definingMethodReference">A reference to the method defining the referenced generic parameter.</param>
            <param name="index">The index of the referenced generic parameter. This is an index rather than a name because metadata in CLR
            PE files contain only the index, not the name.</param>
        </member>
        <member name="T:Microsoft.Cci.NameTable">
            <summary>
            Reusable implementation of name table.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.NameTable.#ctor">
            <summary>
            Constructor for the name table.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.NameTable.EmptyName">
            <summary>
            The Empty name.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.NameTable.GetNameFor(System.String)">
            <summary>
            Gets a cached IName instance corresponding to the given string. If no cached instance exists, a new instance is created.
            The method is only available to fully trusted code since it allows the caller to cause new objects to be added to the cache.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.GlobalAssemblyCache">
            <summary>
            Contains helper routines to query the GAC for the presence and locations of assemblies.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.GlobalAssemblyCache.Contains(System.Uri)">
            <summary>
            Determines whether the GAC contains the specified code base URI.
            </summary>
            <param name="codeBaseUri">The code base URI.</param>
        </member>
        <member name="M:Microsoft.Cci.GlobalAssemblyCache.GetLocation(Microsoft.Cci.AssemblyIdentity,Microsoft.Cci.IMetadataHost)">
            <summary>
            Returns the original location of the corresponding assembly if available, otherwise returns the location of the shadow copy.
            If the corresponding assembly is not in the GAC, null is returned.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MemberHelper">
            <summary>
            Helper class for computing information from the structure of ITypeDefinitionMember instances.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MemberHelper.ComputeFieldOffset(Microsoft.Cci.ITypeDefinitionMember,Microsoft.Cci.ITypeDefinition)">
            <summary>
            Returns the number of bytes that separate the start of an instance of the items's declaring type from the start of the field itself.
            </summary>
            <param name="item">The item (field or nested type) of interests, which must not be static. </param>
            <param name="containingTypeDefinition">The type containing the item.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.MemberHelper.GetExplicitlyOverriddenMethods(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Returns zero or more base class and interface methods that are explicitly overridden by the given method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MemberHelper.GetFieldBitOffset(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Returns the number of least significant bits in the representation of field.Type that should be ignored when reading or writing the field value at MemberHelper.GetFieldOffset(field).
            </summary>
            <param name="field">The bit field whose bit offset is to returned.</param>
        </member>
        <member name="M:Microsoft.Cci.MemberHelper.GetFieldOffset(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Get the field offset of a particular field, whose containing type may have its own policy
            of assigning offset. For example, a struct and a union in C may be different.
            </summary>
            <param name="field">The field whose offset is to returned. The field must not be static.</param>
        </member>
        <member name="M:Microsoft.Cci.MemberHelper.GetImplicitlyImplementedInterfaceMethods(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Returns zero or more interface methods that are implemented by the given method. Only methods from interfaces that
            are directly implemented by the containing type of the given method are returned. Interfaces declared on base classes
            are always fully implemented by the base class, albeit sometimes by an abstract method that is itself implemented by a derived class method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MemberHelper.GetImplicitlyOverriddenBaseClassMethod(Microsoft.Cci.IMethodDefinition)">
            <summary>
            Returns the method from the closest base class that is overridden by the given method.
            If no such method exists, Dummy.Method is returned.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MemberHelper.GetMemberSignature(Microsoft.Cci.ITypeMemberReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the given type member definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MemberHelper.GetMethodSignature(Microsoft.Cci.IMethodReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the given method definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MemberHelper.IsVolatile(Microsoft.Cci.IFieldDefinition)">
            <summary>
            Returns true if the field signature has the System.Runtime.CompilerServices.IsVolatile modifier.
            Such fields should only be accessed with volatile reads and writes.
            </summary>
            <param name="field">The field to inspect for the System.Runtime.CompilerServices.IsVolatile modifier.</param>
        </member>
        <member name="M:Microsoft.Cci.MemberHelper.SignaturesAreEqual(Microsoft.Cci.ISignature,Microsoft.Cci.ISignature)">
            <summary>
            Returns true if the two signatures match according to the criteria of the CLR loader.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MemberHelper.ParameterInformationComparer">
            <summary>
            A static instance of type ParameterInformationComparer.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.MethodReference">
            <summary>
            A reference to a method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MethodReference.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.ITypeReference,Microsoft.Cci.CallingConvention,Microsoft.Cci.ITypeReference,Microsoft.Cci.IName,System.UInt16,Microsoft.Cci.ITypeReference[])">
            <summary>
            Allocates a reference to a method.
            </summary>
            <param name="host">Provides a standard abstraction over the applications that host components that provide or consume objects from the metadata model.</param>
            <param name="containingType">A reference to the containing type of the referenced method.</param>
            <param name="callingConvention">The calling convention of the referenced method.</param>
            <param name="returnType">The return type of the referenced method.</param>
            <param name="name">The name of the referenced method.</param>
            <param name="genericParameterCount">The number of generic parameters of the referenced method. Zero if the referenced method is not generic.</param>
            <param name="parameterTypes">Zero or more references the types of the parameters of the referenced method.</param>
        </member>
        <member name="M:Microsoft.Cci.MethodReference.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.ITypeReference,Microsoft.Cci.CallingConvention,Microsoft.Cci.ITypeReference,Microsoft.Cci.IName,System.UInt16,System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterTypeInformation},Microsoft.Cci.ITypeReference[])">
            <summary>
            Allocates a reference to a method.
            </summary>
            <param name="host">Provides a standard abstraction over the applications that host components that provide or consume objects from the metadata model.</param>
            <param name="containingType">A reference to the containing type of the referenced method.</param>
            <param name="callingConvention">The calling convention of the referenced method.</param>
            <param name="returnType">The return type of the referenced method.</param>
            <param name="name">The name of the referenced method.</param>
            <param name="genericParameterCount">The number of generic parameters of the referenced method. Zero if the referenced method is not generic.</param>
            <param name="parameters">Information about the parameters forming part of the signature of the referenced method.</param>
            <param name="extraParameterTypes">Reference to the types of the the extra arguments supplied by the method call that uses this reference.</param>
        </member>
        <member name="P:Microsoft.Cci.MethodReference.AcceptsExtraArguments">
            <summary>
            True if the call sites that references the method with this object supply extra arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MethodReference.CallingConvention">
            <summary>
            The calling convention of the referenced method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MethodReference.ContainingType">
            <summary>
            A reference to the containing type of the referenced method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MethodReference.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IMethodReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MethodReference.ExtraParameters">
            <summary>
            Information about this types of the extra arguments supplied at the call sites that
            reference the method with this object.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MethodReference.GenericParameterCount">
            <summary>
            The number of generic parameters of the referenced method. Zero if the referenced method is not generic.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.MethodReference.host">
            <summary>
            Provides a standard abstraction over the applications that host components that provide or consume objects from the metadata model.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MethodReference.InternedKey">
            <summary>
            Returns the unique interned key associated with the referenced method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MethodReference.IsGeneric">
            <summary>
            True if the referenced method has generic parameters;
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MethodReference.Name">
            <summary>
            The name of the referenced method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MethodReference.ParameterCount">
            <summary>
            The number of required parameters of the referenced method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MethodReference.Parameters">
            <summary>
            The parameters forming part of this signature.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MethodReference.ResolvedMethod">
            <summary>
            The method being referred to.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MethodReference.Resolve(Microsoft.Cci.ITypeDefinition)">
            <summary>
            Searches the given type, as well as its base classes or base interfaces (if it is an interface), for a method
            that matches this method reference and returns the method. Returns Dummy.Method is no matching method can be found.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.MethodReference.Type">
            <summary>
            The return type of the referenced method.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.SimpleParameterTypeInformation">
            <summary>
            Information that describes a method or property parameter, but does not include all the information in a IParameterDefinition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SimpleParameterTypeInformation.#ctor(Microsoft.Cci.ISignature,System.UInt16,Microsoft.Cci.ITypeReference)">
            <summary>
            Allocates an object with information that describes a method or property parameter, but does not include all the information in a IParameterDefinition.
            </summary>
            <param name="containingSignature">The method or property that defines the described parameter.</param>
            <param name="index">The position in the parameter list where the described parameter can be found.</param>
            <param name="type">The type of argument value that corresponds to the described parameter.</param>
        </member>
        <member name="P:Microsoft.Cci.SimpleParameterTypeInformation.ContainingSignature">
            <summary>
            The method or property that defines the described parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SimpleParameterTypeInformation.Index">
            <summary>
            The position in the parameter list where the described parameter can be found.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SimpleParameterTypeInformation.Type">
            <summary>
            The type of argument value that corresponds to the described parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ParameterInformationComparer">
            <summary>
            An object that compares to instances of IParameterTypeInformation for equality.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ParameterInformationComparer.Equals(Microsoft.Cci.IParameterTypeInformation,Microsoft.Cci.IParameterTypeInformation)">
            <summary>
            Returns true if the given two instances if IParameterTypeInformation are equivalent.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ParameterInformationComparer.GetHashCode(Microsoft.Cci.IParameterTypeInformation)">
            <summary>
            Returns a hash code that is the same for any two equivalent instances of IParameterTypeInformation.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.SignatureFormatter">
            <summary>
            A collection of methods that format type member signatures as strings. The methods are virtual and reference each other.
            By default, types are formatting according to C# conventions. However, by overriding one or more of the
            methods, the formatting can be customized for other languages.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.#ctor">
            <summary>
            Allocates an object with a collection of methods that format type member signatures as strings. The methods are virtual and reference each other.
            By default, types are formatting according to C# conventions. However, by overriding one or more of the
            methods, the formatting can be customized for other languages.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.#ctor(Microsoft.Cci.TypeNameFormatter)">
            <summary>
            Allocates an object with a collection of methods that format type member signatures as strings. The methods are virtual and reference each other.
            By default, types are formatting according to C# conventions. However, by overriding one or more of the
            methods, the formatting can be customized for other languages.
            </summary>
            <param name="typeNameFormatter">The type name formatter object to use for formatting the type references that occur in the signatures.</param>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.GetEventSignature(Microsoft.Cci.IEventDefinition,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the signature of the given event definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.GetFieldSignature(Microsoft.Cci.IFieldReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the signature of the given field and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.GetMemberSignature(Microsoft.Cci.ITypeMemberReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the given type member definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.GetMethodSignature(Microsoft.Cci.IMethodReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the signature of the given method and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.GetPropertySignature(Microsoft.Cci.IPropertyDefinition,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the signature of the given property definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.AppendGenericArguments(Microsoft.Cci.IGenericMethodInstanceReference,Microsoft.Cci.NameFormattingOptions,System.Text.StringBuilder)">
            <summary>
            Appends a formatted string of type arguments. Enclosed in angle brackets and comma-delimited.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.AppendGenericParameters(Microsoft.Cci.IMethodReference,Microsoft.Cci.NameFormattingOptions,System.Text.StringBuilder)">
            <summary>
            Appends a formatted string of type parameters. Enclosed in angle brackets and comma-delimited.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.AppendMethodParameters(System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterTypeInformation},Microsoft.Cci.NameFormattingOptions,System.Text.StringBuilder)">
            <summary>
            Appends a formatted string of parameters. Enclosed in parentheses and comma-delimited.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.AppendMethodName(Microsoft.Cci.IMethodReference,Microsoft.Cci.NameFormattingOptions,System.Text.StringBuilder)">
            <summary>
            Appends the method name, optionally including the containing type name and using special names for methods with IsSpecialName set to true.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.AppendParameter(Microsoft.Cci.IParameterTypeInformation,Microsoft.Cci.NameFormattingOptions,System.Text.StringBuilder)">
            <summary>
            Appends a formatted parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.AppendPropertyName(Microsoft.Cci.IPropertyDefinition,Microsoft.Cci.NameFormattingOptions,System.Text.StringBuilder)">
            <summary>
            Appends the method name, optionally including the containing type name.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.AppendPropertyParameters(System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterDefinition},Microsoft.Cci.NameFormattingOptions,System.Text.StringBuilder)">
            <summary>
            Appends a formatted string of parameters. Enclosed in square brackets and comma-delimited.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SignatureFormatter.AppendReturnTypeSignature(Microsoft.Cci.ISignature,Microsoft.Cci.NameFormattingOptions,System.Text.StringBuilder)">
            <summary>
            Formats the return type of a signature
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SpecializedEventDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(IEventDefinition) method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SpecializedEventDefinition.IsRuntimeSpecial">
            <summary>
            True if the event gets special treatment from the runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SpecializedFieldDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(IFieldDefinition) method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SpecializedGenericMethodParameter.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(IGenericMethodParameter) method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SpecializedMethodDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(IMethodDefinition) method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SpecializedPropertyDefinition.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(IPropertyDefinition) method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.SpecializedPropertyDefinition.IsRuntimeSpecial">
            <summary>
            True if the property gets special treatment from the runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SpecializedTypeDefinitionMember`1.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IDoubleDispatcher. The dispatch method does not invoke Dispatch on any child objects. If child traversal
            is desired, the implementations of the Visit methods should do the subsequent dispatching.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.AssemblyReference">
            <summary>
            A reference to a .NET assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AssemblyReference.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.AssemblyIdentity)">
            <summary>
            Allocates a reference to a .NET assembly.
            </summary>
            <param name="host">Provides a standard abstraction over the applications that host components that provide or consume objects from the metadata model.</param>
            <param name="assemblyIdentity">The identity of the referenced assembly.</param>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.Aliases">
            <summary>
            A list of aliases for the root namespace of the referenced assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.AssemblyIdentity">
            <summary>
            The identity of the referenced assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.ContainingAssembly">
            <summary>
            The Assembly that contains this module. May be null if the module is not part of an assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.Culture">
            <summary>
            Identifies the culture associated with the assembly reference. Typically specified for sattelite assemblies with localized resources.
            Empty if not specified.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.AssemblyReference.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IAssemblyReference).
            </summary>
        </member>
        <member name="F:Microsoft.Cci.AssemblyReference._host">
            <summary>
            Provides a standard abstraction over the applications that host components that provide or consume objects from the metadata model.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this AssemblyReference instance.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.ModuleIdentity">
            <summary>
            The identity of the referenced module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.Name">
            <summary>
            The name of the referenced assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.PublicKeyToken">
            <summary>
            The hashed 8 bytes of the public key of the referenced assembly. This is empty if the referenced assembly does not have a public key.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.ResolvedAssembly">
            <summary>
            The referenced assembly, or Dummy.Assembly if the reference cannot be resolved.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.ResolvedModule">
            <summary>
            The referenced module, or Dummy.Module if the reference cannot be resolved.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.ResolvedUnit">
            <summary>
            The referenced unit, or Dummy.Unit if the reference cannot be resolved.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.UnifiedAssemblyIdentity">
            <summary>
            Returns the identity of the assembly reference to which this assembly reference has been unified.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.UnitIdentity">
            <summary>
            The identity of the unit reference.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AssemblyReference.Version">
            <summary>
            The version of the referenced assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.BaseTypeReference">
            <summary>
            A reference to a type.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.BaseTypeReference.#ctor(Microsoft.Cci.IMetadataHost,System.Boolean,System.Boolean)">
            <summary>
            Allocates a reference to a type.
            </summary>
            <param name="host">Provides a standard abstraction over the applications that host components that provide or consume objects from the metadata model.</param>
            <param name="isEnum">True if the type is an enumeration (it extends System.Enum and is sealed). Corresponds to C# enum.</param>
            <param name="isValueType">True if the referenced type is a value type.</param>
        </member>
        <member name="P:Microsoft.Cci.BaseTypeReference.AliasForType">
            <summary>
            Gives the alias for the type
            </summary>
        </member>
        <member name="P:Microsoft.Cci.BaseTypeReference.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.BaseTypeReference.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IDefinition. The dispatch method does not invoke Dispatch on any child objects. If child traversal
            is desired, the implementations of the Visit methods should do the subsequent dispatching.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.BaseTypeReference.host">
            <summary>
            Provides a standard abstraction over the applications that host components that provide or consume objects from the metadata model.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.BaseTypeReference.InternedKey">
            <summary>
            Returns the unique interned key associated with the type. This takes unification/aliases/custom modifiers into account .
            </summary>
        </member>
        <member name="P:Microsoft.Cci.BaseTypeReference.IsAlias">
            <summary>
            Indicates if this type reference resolved to an alias rather than a type
            </summary>
        </member>
        <member name="P:Microsoft.Cci.BaseTypeReference.IsEnum">
            <summary>
            True if the type is an enumeration (it extends System.Enum and is sealed). Corresponds to C# enum.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.BaseTypeReference.IsValueType">
            <summary>
            True if the type is a value type.
            Value types are sealed and extend System.ValueType or System.Enum.
            A type parameter for which MustBeValueType (the struct constraint in C#) is true also returns true for this property.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.BaseTypeReference.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this IReference instance.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.BaseTypeReference.PlatformType">
            <summary>
            A collection of references to types from the core platform, such as System.Object and System.String.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.BaseTypeReference.Resolve">
            <summary>
            The type definition being referred to.
            In case this type was alias, this is also the type of the aliased type
            </summary>
        </member>
        <member name="P:Microsoft.Cci.BaseTypeReference.TypeCode">
            <summary>
            Unless the value of TypeCode is PrimitiveTypeCode.NotPrimitive, the type corresponds to a "primitive: CLR type (such as System.Int32) and
            the type code identifies which of the primitive types it corresponds to.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ModuleReference">
            <summary>
            A reference to a .NET module.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ModuleReference.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.ModuleIdentity)">
            <summary>
            Allocates a reference to a .NET module.
            </summary>
            <param name="host">Provides a standard abstraction over the applications that host components that provide or consume objects from the metadata model.</param>
            <param name="moduleIdentity"></param>
        </member>
        <member name="P:Microsoft.Cci.ModuleReference.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ModuleReference.ContainingAssembly">
            <summary>
            The Assembly that contains this module. May be null if the module is not part of an assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ModuleReference.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IModuleReference).
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ModuleReference._host">
            <summary>
            Provides a standard abstraction over the applications that host components that provide or consume objects from the metadata model.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ModuleReference.Locations">
            <summary>
            A potentially empty collection of locations that correspond to this ModuleReference instance.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ModuleReference.ModuleIdentity">
            <summary>
            The identity of the referenced module.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ModuleReference.Name">
            <summary>
            The name of the referenced assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ModuleReference.ResolvedModule">
            <summary>
            The referenced module, or Dummy.Module if the reference cannot be resolved.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ModuleReference.ResolvedUnit">
            <summary>
            The referenced unit, or Dummy.Unit if the reference cannot be resolved.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.ModuleReference.UnitIdentity">
            <summary>
            The identity of the unit reference.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.NamespaceTypeReference">
            <summary>
            A reference to a type definition that is a member of a namespace definition.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.NamespaceTypeReference.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IUnitNamespaceReference,Microsoft.Cci.IName,System.UInt16,System.Boolean,System.Boolean,Microsoft.Cci.PrimitiveTypeCode)">
            <summary>
            Allocates a type definition that is a member of a namespace definition.
            </summary>
            <param name="host">Provides a standard abstraction over the applications that host components that provide or consume objects from the metadata model.</param>
            <param name="containingUnitNamespace">The namespace that contains the referenced type.</param>
            <param name="name">The name of the referenced type.</param>
            <param name="genericParameterCount">The number of generic parameters. Zero if the type is not generic.</param>
            <param name="isEnum">True if the type is an enumeration (it extends System.Enum and is sealed). Corresponds to C# enum.</param>
            <param name="isValueType">True if the referenced type is a value type.</param>
            <param name="typeCode">A value indicating if the type is a primitive type or not.</param>
        </member>
        <member name="P:Microsoft.Cci.NamespaceTypeReference.ContainingUnitNamespace">
            <summary>
            The namespace that contains the referenced type.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.NamespaceTypeReference.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(INamespaceTypeReference)
            </summary>
        </member>
        <member name="P:Microsoft.Cci.NamespaceTypeReference.GenericParameterCount">
            <summary>
            The number of generic parameters. Zero if the type is not generic.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.NamespaceTypeReference.InternedKey">
            <summary>
            Returns the unique interned key associated with the type. This takes unification/aliases/custom modifiers into account .
            </summary>
        </member>
        <member name="P:Microsoft.Cci.NamespaceTypeReference.Name">
            <summary>
            The name of the referenced type.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.NamespaceTypeReference.ResolvedType">
            <summary>
            The namespace type this reference resolves to.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.NamespaceTypeReference.GetResolvedType">
            <summary>
            The namespace type this reference resolves to.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.NamespaceTypeReference.Resolve">
            <summary>
            The type definition being referred to.
            In case this type was alias, this is also the type of the aliased type
            </summary>
        </member>
        <member name="M:Microsoft.Cci.NamespaceTypeReference.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.NamespaceTypeReference.TypeCode">
            <summary>
            Unless the value of TypeCode is PrimitiveTypeCode.NotPrimitive, the type corresponds to a "primitive: CLR type (such as System.Int32) and
            the type code identifies which of the primitive types it corresponds to.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.NamespaceTypeReference.MangleName">
            <summary>
            If true, the type name is mangled by appending "`n" where n is the number of type parameters, if the number of type parameters is greater than 0.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.NestedUnitNamespaceReference">
            <summary>
            A reference to a nested unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.NestedUnitNamespaceReference.#ctor(Microsoft.Cci.IUnitNamespaceReference,Microsoft.Cci.IName)">
            <summary>
            Allocates a reference to a nested unit namespace.
            </summary>
            <param name="containingUnitNamespace">A reference to the unit namespace that contains the referenced nested unit namespace.</param>
            <param name="name">The name of the referenced nested unit namespace.</param>
        </member>
        <member name="P:Microsoft.Cci.NestedUnitNamespaceReference.ContainingUnitNamespace">
            <summary>
            A reference to the unit namespace that contains the referenced nested unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.NestedUnitNamespaceReference.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(INestedUnitNamespaceReference) method.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.NestedUnitNamespaceReference.Name">
            <summary>
            The name of the referenced nested unit namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.NestedUnitNamespaceReference.ResolvedNestedUnitNamespace">
            <summary>
            The namespace definition being referred to.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.NestedUnitNamespaceReference.Unit">
            <summary>
            A reference to the unit that defines the referenced namespace.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.PlatformType">
            <summary>
            A collection of references to types from the core platform, such as System.Object and System.String.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PlatformType.#ctor(Microsoft.Cci.IMetadataHost)">
            <summary>
            Allocates a collection of references to types from the core platform, such as System.Object and System.String.
            </summary>
            <param name="host">
            An object that provides a standard abstraction over the applications that host components that provide or consume objects from the metadata model.
            </param>
        </member>
        <member name="M:Microsoft.Cci.PlatformType.CreateReference(Microsoft.Cci.IAssemblyReference,System.String[])">
            <summary>
            Creates a type reference to a namespace type from the given assembly, where the last element of the names
            array is the name of the type and the other elements are the names of the namespaces.
            </summary>
            <param name="assemblyReference">A reference to the assembly that contains the type for which a reference is desired.</param>
            <param name="names">The last entry of this array is the name of the type, the others are the names of the containing namespaces.</param>
        </member>
        <member name="M:Microsoft.Cci.PlatformType.CreateReference(Microsoft.Cci.IAssemblyReference,System.Boolean,System.String[])">
            <summary>
            Creates a type reference to a namespace type from the given assembly, where the last element of the names
            array is the name of the type and the other elements are the names of the namespaces.
            </summary>
            <param name="assemblyReference">A reference to the assembly that contains the type for which a reference is desired.</param>
            <param name="isValueType">True if the referenced type is known to be a value type.</param>
            <param name="names">The last entry of this array is the name of the type, the others are the names of the containing namespaces.</param>
        </member>
        <member name="M:Microsoft.Cci.PlatformType.CreateReference(Microsoft.Cci.IAssemblyReference,Microsoft.Cci.PrimitiveTypeCode,System.String[])">
            <summary>
            Creates a type reference to a namespace type from the given assembly, where the last element of the names
            array is the name of the type and the other elements are the names of the namespaces.
            </summary>
            <param name="assemblyReference">A reference to the assembly that contains the type for which a reference is desired.</param>
            <param name="typeCode">A code that identifies what kind of type is being referenced.</param>
            <param name="names">The last entry of this array is the name of the type, the others are the names of the containing namespaces.</param>
        </member>
        <member name="M:Microsoft.Cci.PlatformType.CreateReference(Microsoft.Cci.IAssemblyReference,System.UInt16,System.String[])">
            <summary>
            Creates a type reference to a namespace type from the given assembly, where the last element of the names
            array is the name of the type and the other elements are the names of the namespaces.
            </summary>
            <param name="assemblyReference">A reference to the assembly that contains the type for which a reference is desired.</param>
            <param name="genericParameterCount">The number of generic parameters, if any, that the type has must. Must be zero or more.</param>
            <param name="names">The last entry of this array is the name of the type, the others are the names of the containing namespaces.</param>
        </member>
        <member name="M:Microsoft.Cci.PlatformType.CreateReference(Microsoft.Cci.IAssemblyReference,System.Boolean,System.UInt16,Microsoft.Cci.PrimitiveTypeCode,System.String[])">
            <summary>
            Creates a type reference to a namespace type from the given assembly, where the last element of the names
            array is the name of the type and the other elements are the names of the namespaces.
            </summary>
            <param name="assemblyReference">A reference to the assembly that contains the type for which a reference is desired.</param>
            <param name="isValueType">True if the referenced type is known to be a value type.</param>
            <param name="genericParameterCount">The number of generic parameters, if any, that the type has must. Must be zero or more.</param>
            <param name="typeCode">A code that identifies what kind of type is being referenced.</param>
            <param name="names">The last entry of this array is the name of the type, the others are the names of the containing namespaces.</param>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.ContractAssemblyRef">
            <summary>
            A reference to the assembly that contains the types and methods used to encode information about code contracts.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.CoreAssemblyRef">
            <summary>
            A reference to the assembly that contains the system types that have special encodings in metadata.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemDiagnosticsContractsContract">
            <summary>
            A reference to the class that contains the standard contract methods, such as System.Diagnostics.Contracts.Contract.Requires.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.PointerSize">
            <summary>
            The size (in bytes) of a pointer on the platform on which these types are implemented.
            The value of this property is either 4 (32-bits) or 8 (64-bit).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemArgIterator">
            <summary>
            System.ArgIterator
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemArray">
            <summary>
            System.Array
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemAsyncCallback">
            <summary>
            System.AsyncCallBack
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemAttribute">
            <summary>
            System.Attribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemAttributeUsageAttribute">
            <summary>
            System.AttributeUsageAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemBoolean">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemChar">
            <summary>
            System.Char
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemCollectionsGenericDictionary">
            <summary>
            System.Collections.Generic.Dictionary
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemCollectionsGenericICollection">
            <summary>
            System.Collections.Generic.ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemCollectionsGenericIEnumerable">
            <summary>
            System.Collections.Generic.IEnumerable
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemCollectionsGenericIEnumerator">
            <summary>
            System.Collections.Generic.IEnumerator
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemCollectionsGenericIList">
            <summary>
            System.Collections.Generic.IList
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemCollectionsICollection">
            <summary>
            System.Collections.ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemCollectionsIEnumerable">
            <summary>
            System.Collections.IEnumerable
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemCollectionsIEnumerator">
            <summary>
            System.Collections.IEnumerator
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemCollectionsIList">
            <summary>
            System.Collections.IList
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemDateTime">
            <summary>
            System.DateTime
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemDecimal">
            <summary>
            System.Decimal
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemDelegate">
            <summary>
            System.Delegate
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemDBNull">
            <summary>
            System.DBNull
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemEnum">
            <summary>
            System.Enum
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemFloat32">
            <summary>
            System.Float32
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemFloat64">
            <summary>
            System.Float64
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemIAsyncResult">
            <summary>
            System.IAsyncResult
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemICloneable">
            <summary>
            System.ICloneable
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemInt16">
            <summary>
            System.Int16
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemInt32">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemInt64">
            <summary>
            System.Int64
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemInt8">
            <summary>
            System.Int8
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemIntPtr">
            <summary>
            System.IntPtr
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemMulticastDelegate">
            <summary>
            System.MulticastDelegate
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemNullable">
            <summary>
            System.Nullable&lt;T&gt;
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemObject">
            <summary>
            System.Object
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemRuntimeArgumentHandle">
            <summary>
            System.RuntimeArgumentHandle
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemRuntimeFieldHandle">
            <summary>
            System.RuntimeFieldHandle
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemRuntimeMethodHandle">
            <summary>
            System.RuntimeMethodHandle
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemRuntimeTypeHandle">
            <summary>
            System.RuntimeTypeHandle
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemRuntimeCompilerServicesCallConvCdecl">
            <summary>
            System.Runtime.CompilerServices.CallConvCdecl
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemRuntimeCompilerServicesCompilerGeneratedAttribute">
            <summary>
            System.Runtime.CompilerServices.CompilerGeneratedAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemRuntimeCompilerServicesFriendAccessAllowedAttribute">
            <summary>
            System.Runtime.CompilerServices.FriendAccessAllowedAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemRuntimeCompilerServicesIsConst">
            <summary>
            System.Runtime.CompilerServices.IsConst
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemRuntimeCompilerServicesIsVolatile">
            <summary>
            System.Runtime.CompilerServices.IsVolatile
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemRuntimeCompilerServicesReferenceAssemblyAttribute">
            <summary>
            System.Runtime.CompilerServices.ReferenceAssemblyAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemRuntimeInteropServicesDllImportAttribute">
            <summary>
            System.Runtime.InteropServices.DllImportAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemSecurityPermissionsSecurityAction">
            <summary>
            System.Security.Permissions.SecurityAction
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemSecuritySecurityCriticalAttribute">
            <summary>
            System.Security.SecurityCriticalAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemSecuritySecuritySafeCriticalAttribute">
            <summary>
            System.Security.SecuritySafeCriticalAttribute
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemString">
            <summary>
            System.String
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemType">
            <summary>
            System.Type
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemTypedReference">
            <summary>
            System.TypedReference
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemUInt16">
            <summary>
            System.UInt16
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemUInt32">
            <summary>
            System.UInt32
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemUInt64">
            <summary>
            System.UInt64
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemUInt8">
            <summary>
            System.UInt8
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemUIntPtr">
            <summary>
            System.UIntPtr
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemValueType">
            <summary>
            System.ValueType
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemVoid">
            <summary>
            System.Void
            </summary>
        </member>
        <member name="P:Microsoft.Cci.PlatformType.SystemVoidPtr">
            <summary>
            System.Void*
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PlatformType.GetTypeFor(Microsoft.Cci.PrimitiveTypeCode)">
            <summary>
            Maps a PrimitiveTypeCode value (other than Pointer, Reference and NotPrimitive) to a corresponding ITypeDefinition instance.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.RootUnitNamespaceReference">
            <summary>
            A reference to a root unit namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.RootUnitNamespaceReference.#ctor(Microsoft.Cci.IUnitReference)">
            <summary>
            Allocates a reference to a root unit namespace.
            </summary>
            <param name="unit">A reference to the unit that defines the referenced namespace.</param>
        </member>
        <member name="M:Microsoft.Cci.RootUnitNamespaceReference.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls visitor.Visit(IRootUnitNamespaceReference).
            </summary>
        </member>
        <member name="P:Microsoft.Cci.RootUnitNamespaceReference.ResolvedUnitNamespace">
            <summary>
            The namespace definition being referred to, if it can be resolved. Otherwise Dummy.UnitNamespace;
            </summary>
        </member>
        <member name="P:Microsoft.Cci.RootUnitNamespaceReference.Unit">
            <summary>
            A reference to the unit that defines the referenced namespace.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.GenericTypeInstance.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.IGenericTypeInstanceReference,Microsoft.Cci.IGenericMethodInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Specialize the type arguments of genericTypeIntance and (if necessary) return a new instance of genericTypeInstance.GenericType using
            the specialized type arguments. Specialization means replacing any references to the type parameters of containingMethodInstance.GenericMethod with the
            corresponding values of containingMethodInstance.GenericArguments.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.GenericTypeInstance.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.IGenericTypeInstanceReference,Microsoft.Cci.IGenericTypeInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            Specialize the type arguments of genericTypeIntance and (if necessary) return a new instance of containingTypeInstance.GenericType using
            the specialized type arguments. Specialization means replacing any references to the type parameters of containingTypeInstance.GenericType with the
            corresponding values of containingTypeInstance.GenericArguments.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.GenericParameter.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.IGenericMethodParameterReference,Microsoft.Cci.IGenericMethodInstanceReference)">
            <summary>
            If the given generic parameter is a generic parameter of the generic method of which the given method is an instance, then return the corresponding type argument that
            was used to create the method instance.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.GenericParameter.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.IGenericTypeParameterReference,Microsoft.Cci.IGenericTypeInstanceReference)">
            <summary>
            If the given generic parameter is a generic parameter of the generic type of which the given type is an instance, then return the corresponding type argument that
            was used to create the type instance.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ManagedPointerType.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.IManagedPointerTypeReference,Microsoft.Cci.IGenericMethodInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            If the given managed pointer has a target type that involves a type parameter from the generic method from which the given method was instantiated,
            then return a new pointer using a target type that has been specialized with the type arguments of the given generic method instance.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ManagedPointerType.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.IManagedPointerTypeReference,Microsoft.Cci.IGenericTypeInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            If the given managed pointer has a target type that involves a type parameter from the generic type from which the given type was instantiated,
            then return a new pointer using a target type that has been specialized with the type arguments of the given generic type instance.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Matrix.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.IArrayTypeReference,Microsoft.Cci.IGenericMethodInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            If the given matrix has an element type that involves a type parameter from the generic method from which the given method was instantiated,
            then return a new matrix using an element type that has been specialized with the type arguments of the given generic method instance.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Matrix.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.IArrayTypeReference,Microsoft.Cci.IGenericTypeInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            If the given matrix has an element type that involves a type parameter from the generic type from which the given type was instantiated,
            then return a new matrix using an element type that has been specialized with the type arguments of the given generic type instance.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PointerType.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.IPointerTypeReference,Microsoft.Cci.IGenericMethodInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            If the given pointer has a target type that involves a type parameter from the generic method from which the given method was instantiated,
            then return a new pointer using a target type that has been specialized with the type arguments of the given generic method instance.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.PointerType.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.IPointerTypeReference,Microsoft.Cci.IGenericTypeInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            If the given pointer has a target type that involves a type parameter from the generic type from which the given type was instantiated,
            then return a new pointer using a target type that has been specialized with the type arguments of the given generic type instance.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.Scope`1">
            <summary>
            A collection of named members, with routines to search and maintain the collection. The search routines have sublinear complexity, typically close to constant time.
            </summary>
            <typeparam name="MemberType">The type of the members of this scope.</typeparam>
        </member>
        <member name="M:Microsoft.Cci.Scope`1.AddMemberToCache(`0)">
            <summary>
            Adds a member to the scope. Does nothing if the member is already in the scope.
            </summary>
            <param name="member">The member to add to the scope.</param>
        </member>
        <member name="M:Microsoft.Cci.Scope`1.Contains(`0)">
            <summary>
            Return true if the given member instance is a member of this scope.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Scope`1.GetMatchingMembersNamed(Microsoft.Cci.IName,System.Boolean,Microsoft.Cci.Function{`0,System.Boolean})">
            <summary>
            Returns the list of members with the given name that also satisfy the given predicate.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Scope`1.GetMatchingMembers(Microsoft.Cci.Function{`0,System.Boolean})">
            <summary>
            Returns the list of members that satisfy the given predicate.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Scope`1.GetMembersNamed(Microsoft.Cci.IName,System.Boolean)">
            <summary>
            Returns the list of members with the given name.
            </summary>
            <param name="name">The name of the members to retrieve.</param>
            <param name="ignoreCase">True if the case of the name must be ignored when retrieving the members.</param>
        </member>
        <member name="M:Microsoft.Cci.Scope`1.InitializeIfNecessary">
            <summary>
            Provides a derived class with an opportunity to lazily initialize the scope's data structures via calls to AddMemberToCache.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.Scope`1.Members">
            <summary>
            The collection of member instances that are members of this scope.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SpecializedGenericParameter`1.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IDoubleDispatcher. The dispatch method does not invoke Dispatch on any child objects. If child traversal
            is desired, the implementations of the Visit methods should do the subsequent dispatching.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.SpecializedGenericTypeParameter.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(IGenericTypeParameter) method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.ITypeReference,Microsoft.Cci.IGenericMethodInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            If the given unspecialized type reference is a constructed type, such as an instance of IArrayTypeReference or IPointerTypeReference or IGenericTypeInstanceReference,
            then return a new instance (if necessary) in which all refererences to the type parameters of containingMethodInstance.GenericType have been replaced
            with the corresponding values from containingMethodInstance.GenericArguments. If the type is not a constructed type the method just returns the type.
            For the purpose of this method, an instance of IGenericParameter is regarded as a constructed type.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeDefinition.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.ITypeReference,Microsoft.Cci.IGenericTypeInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            If the given unspecialized type definition is a constructed type, such as an instance of IArrayType or IPointerType or IGenericTypeInstance, then return a new instance (if necessary)
            in which all refererences to the type parameters of containingTypeInstance.GenericType have been replaced with the corresponding values
            from containingTypeInstance.GenericArguments. If the type is not a constructed type the method just returns the type.
            For the purpose of this method, an instance of IGenericParameter is regarded as a constructed type.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Vector.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.IArrayTypeReference,Microsoft.Cci.IGenericMethodInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            If the given vector has an element type that involves a type parameter from the generic method from which the given method was instantiated,
            then return a new vector using an element type that has been specialized with the type arguments of the given generic method instance.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.Vector.SpecializeIfConstructedFromApplicableTypeParameter(Microsoft.Cci.IArrayTypeReference,Microsoft.Cci.IGenericTypeInstanceReference,Microsoft.Cci.IInternFactory)">
            <summary>
            If the given vector has an element type that involves a type parameter from the generic type from which the given type was instantiated,
            then return a new vector using an element type that has been specialized with the type arguments of the given generic type instance.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.BaseMetadataTraverser">
            <summary>
            A visitor base class that traverses the object model in depth first, left to right order.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.BaseMetadataTraverser.DispatchAsReference(Microsoft.Cci.ITypeReference)">
            <summary>
            Use this routine, rather than ITypeReference.Dispatch, to call the appropriate derived overload of an ITypeReference.
            The former routine will call Visit(INamespaceTypeDefinition) rather than Visit(INamespaceTypeReference), etc.,
            in the case where a definition is used as a reference to itself.
            </summary>
            <param name="typeReference">A reference to a type definition. Note that a type definition can serve as a reference to itself.</param>
        </member>
        <member name="M:Microsoft.Cci.BaseMetadataTraverser.DispatchAsReference(Microsoft.Cci.IUnitReference)">
            <summary>
            Use this routine, rather than IUnitReference.Dispatch, to call the appropriate derived overload of an IUnitReference.
            The former routine will call Visit(IAssembly) rather than Visit(IAssemblyReference), etc.
            in the case where a definition is used as the reference to itself.
            </summary>
            <param name="unitReference">A reference to a unit. Note that a unit can serve as a reference to itself.</param>
        </member>
        <member name="T:Microsoft.Cci.BaseMetadataVisitor">
            <summary>
            A visitor base class that provides a dummy body for each method of IVisit.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ClrOperandStackType">
            <summary>
            Represents CLR Operand stack types
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrOperandStackType.Int32">
            <summary>
            Operand stack is 32 bit value. It will be treated independent of sign on the stack.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrOperandStackType.Int64">
            <summary>
            Operand stack is 64 bit value. It will be treated independent of sign on the stack.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrOperandStackType.NativeInt">
            <summary>
            Operand stack is platform dependent int value. It will be treated independent of sign on the stack.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrOperandStackType.Float">
            <summary>
            Operand stack represents a real number. It can be converted to either float or double.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrOperandStackType.Reference">
            <summary>
            Operand stack is a reference to some type.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrOperandStackType.Object">
            <summary>
            Operand stack is a reference or value type.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrOperandStackType.Pointer">
            <summary>
            Operand stack is a pointer type
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrOperandStackType.Invalid">
            <summary>
            Operand stack is of invalid type
            </summary>
        </member>
        <member name="T:Microsoft.Cci.ClrHelper">
            <summary>
            Helper class to get CLR Type manipulation information.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ClrHelper.ClrOperandStackTypeFor(Microsoft.Cci.ITypeReference)">
            <summary>
            Gives the Clr operand stack type corresponding to the typeDefinition
            </summary>
            <param name="typeReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.ClrHelper.ClrOperandStackTypeFor(Microsoft.Cci.PrimitiveTypeCode)">
            <summary>
            Gives the Clr operand stack type corresponding to the PrimitiveTypeCode
            </summary>
            <param name="typeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.ClrHelper.PrimitiveTypeCodeFor(Microsoft.Cci.ClrOperandStackType)">
            <summary>
            Gives the primitive type code corresponding to the ClrOperandStackType
            </summary>
            <param name="numericType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.ClrHelper.ConversionPossible(Microsoft.Cci.ClrOperandStackType,Microsoft.Cci.PrimitiveTypeCode)">
            <summary>
            Conversion is possible from value stored on stack of type ClrOpernadStackType to given PrimitiveTypeCode.
            </summary>
            <param name="fromType"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Cci.ClrHelper.AddResult">
            <summary>
            Table representing the result of add operation with respect to ClrOperand stack.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrHelper.DivMulRemResult">
            <summary>
            Table representing the result of division, multiplication and reminder operation with respect to ClrOperand stack.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrHelper.SubResult">
            <summary>
            Table representing the result of substraction operation with respect to ClrOperand stack.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrHelper.UnaryResult">
            <summary>
            Table representing the result of negation and not operation with respect to ClrOperand stack.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrHelper.CompResult">
            <summary>
            Table representing the result of comparision operation with respect to ClrOperand stack.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrHelper.EqCompResult">
            <summary>
            Table representing the result of equality comparision operation with respect to ClrOperand stack.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrHelper.IntOperationResult">
            <summary>
            Table representing the result of integer operation (bitwise and, or, xor) with respect to ClrOperand stack.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrHelper.ShiftOperationResult">
            <summary>
            Table representing the result of bit shift operation with respect to ClrOperand stack.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.ClrHelper.ImplicitConversionPossibleArr">
            <summary>
            Table representing the implicit conversion for the purpose of method calls with respect to ClrOperand stack.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.NameFormattingOptions">
            <summary>
            Options that specify how type and namespace member names should be formatted.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.None">
            <summary>
            Format the name with default options.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.ContractNullable">
            <summary>
            If the type is an instance of System.Nullable&lt;T&gt; format it using a short form, such as T?.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.EmptyTypeParameterList">
            <summary>
            Include empty type parameter lists with the names of generic types.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.EscapeKeyword">
            <summary>
            If the name of the member is the same as keyword, format the name using the keyword escape syntax. For example: "@if" rather than just "if".
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.MemberKind">
            <summary>
            Prefix the kind of member or type to the name. For example "class System.AppDomain".
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.MethodConstraints">
            <summary>
            Include the type constraints of generic methods in their names.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.Modifiers">
            <summary>
            Include modifiers, such as "static" with the name of the member.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.OmitContainingNamespace">
            <summary>
            Do not include the name of the containing namespace in the name of a namespace member.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.OmitContainingType">
            <summary>
            Do not include the name of the containing type in the name of a type member.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.OmitImplementedInterface">
            <summary>
            If the type member explicitly implements an interface, do not include the name of the interface in the name of the member.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.OmitTypeArguments">
            <summary>
            Do not include type argument names with the names of generic type instances.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.OmitWhiteSpaceAfterListDelimiter">
            <summary>
            Don't insert a space after the delimiter in a list. For example (one,two) rather than (one, two).
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.ParameterName">
            <summary>
            Include the names of parameters in the signatures of methods and indexers.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.ParameterModifiers">
            <summary>
            Include modifiers such as "ref" and "out" in the signatures of methods and indexers.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.PreserveSpecialNames">
            <summary>
            Do not transform special names such as .ctor and get_PropertyName into language specific notation.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.ReturnType">
            <summary>
            Include the name of the return types in the signatures of methods and indexers.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.Signature">
            <summary>
            Include the parameter types and optionally additional information such as parameter names.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.SmartTypeName">
            <summary>
            Inlcude the name of the containing type only if it is needed becuase of ambiguity or hiding. Include only as much as is needed to resolve this.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.SmartNamespaceName">
            <summary>
            Inlcude the name of the containing namespace only if it is needed becuase of ambiguity or hiding. Include only as much as is needed to resolve this.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.SupressAttributeSuffix">
            <summary>
            Do not include the "Attribute" suffix in the name of a custom attribute type.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.TypeConstraints">
            <summary>
            Include the type parameter constraints of generic types in their names.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.TypeParameters">
            <summary>
            Include type parameters names with the names of generic types.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.UseGenericTypeNameSuffix">
            <summary>
            Append `n where n is the number of type parameters to the type name.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.UseReflectionStyleForNestedTypeNames">
            <summary>
            Use '+' instead of '.' to delimit the boundary between a containing type name and a nested type name.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.Visibility">
            <summary>
            Include the visibility of the member in its name.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.NameFormattingOptions.UseTypeKeywords">
            <summary>
            If the type corresponds to a keyword use the keyword rather than the type name.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.TypeHelper">
            <summary>
            Helper class for computing information from the structure of ITypeDefinition instances.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.BaseClass(Microsoft.Cci.ITypeDefinition)">
            <summary>
            Returns the Base class. If there is no base type it returns null.
            </summary>
            <param name="typeDef">The type whose base class is to be returned.</param>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.EffectiveBaseClass(Microsoft.Cci.IGenericParameter)">
            <summary>
            Returns the most derived common base class that all types that satisfy the constraints of the given
            generic parameter must derive from.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.IsCompileTimeConstantType(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns true a value of this type can be treated as a compile time constant.
            Such values need not be stored in memory in order to be representable. For example, they can appear as part of a CLR instruction.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.IsPrimitiveInteger(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns true if the CLR allows integer operators to be applied to values of the given type.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.IsSignedPrimitiveInteger(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns true if the CLR allows signed integer operators to be applied to values of the given type.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.IsUnsignedPrimitiveInteger(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns true if the CLR allows unsigned integer operators to be applied to values of the given type.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.MergedType(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.ITypeDefinition)">
            <summary>
            Returns the merged type of two types as per the verification algorithm in CLR.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GenericInstanceVisibilityAsTypeMemberVisibility(Microsoft.Cci.TypeMemberVisibility,System.Collections.Generic.IEnumerable{Microsoft.Cci.ITypeReference})">
            <summary>
            Returns the most accessible visibility that is not greater than the given visibility and the visibilities of each of the given typeArguments.
            For the purpose of computing the intersection, namespace types are treated as being TypeMemberVisibility.Public or TypeMemberVisibility.Assembly.
            Generic type instances are treated as having a visibility that is the intersection of the generic type's visibility and all of the type arguments' visibilities.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.TypeVisibilityAsTypeMemberVisibility(Microsoft.Cci.ITypeDefinition)">
            <summary>
            Returns a TypeMemberVisibility value that corresponds to the visibility of the given type definition.
            Namespace types are treated as being TypeMemberVisibility.Public or TypeMemberVisibility.Assembly.
            Generic type instances are treated as having a visibility that is the intersection of the generic type's visibility and all of the type arguments' visibilities.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.VisibilityIntersection(Microsoft.Cci.TypeMemberVisibility,Microsoft.Cci.TypeMemberVisibility)">
            <summary>
            Returns a TypeMemberVisibility value that is as accessible as possible while being no more accessible than either of the two given visibilities.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GetDefiningUnit(Microsoft.Cci.ITypeDefinition)">
            <summary>
            Returns the unit that defines the given type. If the type is a structural type, such as a pointer or a generic type instance,
            then the result is null.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GetDefiningUnitReference(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns a reference to the unit that defines the given referenced type. If the referenced type is a structural type, such as a pointer or a generic type instance,
            then the result is null.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GetField(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.IName)">
            <summary>
            Returns a field of the given declaring type that has the given name.
            If no such field can be found, Dummy.Field is returned.
            </summary>
            <param name="declaringType">The type thats declares the field.</param>
            <param name="fieldName">The name of the field.</param>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GetField(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.IFieldReference)">
            <summary>
            Returns a field of the given declaring type that has the same name and signature as the given field reference.
            If no such field can be found, Dummy.Field is returned.
            </summary>
            <param name="declaringType">The type thats declares the field.</param>
            <param name="fieldReference">A reference to the field.</param>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GetMethod(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.IName,Microsoft.Cci.ITypeReference[])">
            <summary>
            Returns a method of the given declaring type that has the given name and that matches the given parameter types.
            If no such method can be found, Dummy.Method is returned.
            </summary>
            <param name="declaringType">The type that declares the method to be returned.</param>
            <param name="methodName">The name of the method.</param>
            <param name="parameterTypes">A list of types that should correspond to the parameter types of the returned method.</param>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GetMethod(System.Collections.Generic.IEnumerable{Microsoft.Cci.ITypeDefinitionMember},Microsoft.Cci.IName,Microsoft.Cci.ITypeReference[])">
            <summary>
            Returns the first method, if any, of the given list of type members that has the given name and that matches the given parameter types.
            If no such method can be found, Dummy.Method is returned.
            </summary>
            <param name="members">A list of type members.</param>
            <param name="methodName">The name of the method.</param>
            <param name="parameterTypes">A list of types that should correspond to the parameter types of the returned method.</param>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GetMethod(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.IMethodReference)">
            <summary>
            Returns a method of the given declaring type that matches the given method reference.
            If no such method can be found, Dummy.Method is returned.
            </summary>
            <param name="declaringType">The type that declares the method to be returned.</param>
            <param name="methodReference">A method reference whose name and signature matches that of the desired result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GetInvokeMethod(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.IMetadataHost)">
            <summary>
            Gets the Invoke method from the delegate. Returns Dummy.Method if the delegate type is malformed.
            </summary>
            <param name="delegateType">A delegate type.</param>
            <param name="host">The host application that provided the nametable used by delegateType.</param>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GetMethod(System.Collections.Generic.IEnumerable{Microsoft.Cci.ITypeDefinitionMember},Microsoft.Cci.IMethodReference)">
            <summary>
            Returns the first method, if any, of the given list of type members that matches the signature of the given method.
            If no such method can be found, Dummy.Method is returned.
            </summary>
            <param name="members">A list of type members.</param>
            <param name="methodSignature">A method whose signature matches that of the desired result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GetNamespaceName(Microsoft.Cci.IUnitSetNamespace,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the given namespace definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GetNamespaceName(Microsoft.Cci.IUnitNamespaceReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the given namespace definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GetTypeName(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns a C#-like string that corresponds to a source expression that would bind to the given type definition when appearing in an appropriate context.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GetTypeName(Microsoft.Cci.ITypeReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the given type definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.MostDerivedCommonBaseClass(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.ITypeDefinition)">
            <summary>
            Returns the most derived base class that both given types have in common. Returns null if no such class exists.
            For example: if either or both are interface types, then the result is null.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.ParametersAreEquivalent(Microsoft.Cci.IParameterTypeInformation,Microsoft.Cci.IParameterTypeInformation)">
            <summary>
            Returns true if two parameters are equivalent.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.ParameterListsAreEquivalent(System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterTypeInformation},System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterTypeInformation})">
            <summary>
            Returns true if two parameter lists are equivalent.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.ParameterListsAreEquivalent(System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterDefinition},System.Collections.Generic.IEnumerable{Microsoft.Cci.IParameterDefinition})">
            <summary>
            Returns true if two parameter lists of type IParameterDefinition are equivalent.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.SizeOfType(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns the computed size (number of bytes) of a type. May call the SizeOf property of the type.
            Use SizeOfType(ITypeReference, bool) to suppress the use of the SizeOf property.
            </summary>
            <param name="type">The type whose size is wanted. If not a reference to a primitive type, this type must be resolvable.</param>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.SizeOfType(Microsoft.Cci.ITypeReference,System.Boolean)">
            <summary>
            Returns the computed size (number of bytes) of a type.
            </summary>
            <param name="type">The type whose size is wanted. If not a reference to a primitive type, this type must be resolvable.</param>
            <param name="mayUseSizeOfProperty">If true the SizeOf property of the given type may be evaluated and used
            as the result of this routine if not 0. Remember to specify false for this parameter when using this routine in the implementation
            of the ITypeDefinition.SizeOf property.</param>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.TypeAlignment(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns the byte alignment that values of the given type ought to have. The result is a power of two and greater than zero.
            May call the Alignment property of the type.
            Use TypeAlignment(ITypeDefinition, bool) to suppress the use of the Alignment property.
            </summary>
            <param name="type">The type whose size is wanted. If not a reference to a primitive type, this type must be resolvable.</param>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.TypeAlignment(Microsoft.Cci.ITypeReference,System.Boolean)">
            <summary>
            Returns the byte alignment that values of the given type ought to have. The result is a power of two and greater than zero.
            </summary>
            <param name="type">The type whose size is wanted. If not a reference to a primitive type, this type must be resolvable.</param>
            <param name="mayUseAlignmentProperty">If true the Alignment property of the given type may be inspected and used
            as the result of this routine if not 0. Rembmer to specify false for this parameter when using this routine in the implementation
            of the ITypeDefinition.Alignment property.</param>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.ArrayTypesAreEquivalent(Microsoft.Cci.IArrayTypeReference,Microsoft.Cci.IArrayTypeReference)">
            <summary>
            Returns true if the given two array types are to be considered equivalent for the purpose of signature matching and so on.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GenericTypeInstancesAreEquivalent(Microsoft.Cci.IGenericTypeInstanceReference,Microsoft.Cci.IGenericTypeInstanceReference)">
            <summary>
            Returns true if the given two generic instance types are to be considered equivalent for the purpose of signature matching and so on.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.IsAttributeType(Microsoft.Cci.ITypeDefinition)">
            <summary>
            Returns true if the given type extends System.Attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.PointerTypesAreEquivalent(Microsoft.Cci.IPointerTypeReference,Microsoft.Cci.IPointerTypeReference)">
            <summary>
            Returns true if the given two pointer types are to be considered equivalent for the purpose of signature matching and so on.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GenericTypeParametersAreEquivalent(Microsoft.Cci.IGenericTypeParameterReference,Microsoft.Cci.IGenericTypeParameterReference)">
            <summary>
            Returns true if the given two generic type parameters are to be considered equivalent for the purpose of signature matching and so on.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.GenericMethodParametersAreEquivalent(Microsoft.Cci.IGenericMethodParameterReference,Microsoft.Cci.IGenericMethodParameterReference)">
            <summary>
            Returns true if the given two generic method parameter are to be considered equivalent for the purpose of signature matching and so on.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.FunctionPointerTypesAreEquivalent(Microsoft.Cci.IFunctionPointerTypeReference,Microsoft.Cci.IFunctionPointerTypeReference)">
            <summary>
            Returns true if the given two function pointer types are to be considered equivalent for the purpose of signature matching and so on.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.NamespaceTypesAreEquivalent(Microsoft.Cci.INamespaceTypeReference,Microsoft.Cci.INamespaceTypeReference)">
            <summary>
            Returns true if the given two function pointer types are to be considered equivalent for the purpose of signature matching and so on.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.NestedTypesAreEquivalent(Microsoft.Cci.INestedTypeReference,Microsoft.Cci.INestedTypeReference)">
            <summary>
            Returns true if the given two function pointer types are to be considered equivalent for the purpose of signature matching and so on.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.TypesAreEquivalent(Microsoft.Cci.ITypeReference,Microsoft.Cci.ITypeReference)">
            <summary>
            Returns true if the given two types are to be considered equivalent for the purpose of signature matching and so on.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.Type1DerivesFromOrIsTheSameAsType2(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.ITypeReference)">
            <summary>
            Returns true if type1 is the same as type2 or if it is derives from type2.
            Type1 derives from type2 if the latter is a direct or indirect base class.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.Type1DerivesFromType2(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.ITypeReference)">
            <summary>
            Type1 derives from type2 if the latter is a direct or indirect base class.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.Type1ImplementsType2(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.ITypeReference)">
            <summary>
            Returns true if the given type definition, or one of its base types, implements the given interface or an interface
            that derives from the given interface.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.Type1IsCovariantWithType2(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.ITypeReference)">
            <summary>
            Returns true if Type1 is CovariantWith Type2 as per CLR.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeHelper.TypesAreAssignmentCompatible(Microsoft.Cci.ITypeDefinition,Microsoft.Cci.ITypeDefinition)">
            <summary>
            Returns true if a CLR supplied implicit reference conversion is available to convert a value of the given source type to a corresponding value of the given target type.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.TypeNameFormatter">
            <summary>
            A collection of methods that format types as strings. The methods are virtual and reference each other.
            By default, types are formatting according to C# conventions. However, by overriding one or more of the
            methods, the formatting can be customized for other languages.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.AddGenericParametersIfNeeded(Microsoft.Cci.ITypeReference,System.UInt16,Microsoft.Cci.NameFormattingOptions,System.String)">
            <summary>
            Returns the given type name unless genericParameterCount is greater than zero and NameFormattingOptions.TypeParameters has been specified and the
            type can be resolved. In the latter case, return the type name augmented with the type parameters
            (or, if NameFormatting.UseGenericTypeNameSuffix has been specified, the type name is agumented with `n where n is the number of parameters).
            </summary>
            <param name="type">A reference to a named type.</param>
            <param name="genericParameterCount">The number of generic parameters the type has.</param>
            <param name="formattingOptions">A set of flags that specify how the type name is to be formatted.</param>
            <param name="typeName">The unmangled, unaugmented name of the type.</param>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetArrayTypeName(Microsoft.Cci.IArrayTypeReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like specific string that corresponds to the given type definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetArrayTypeName(Microsoft.Cci.IArrayTypeReference,System.Text.StringBuilder,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Appends a C#-like string that corresponds to the given type definition and that conforms to the specified formatting options to the given string builder.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetGenericParameterName(Microsoft.Cci.IGenericParameterReference)">
            <summary>
            Returns a C#-like string that corresponds to the given type definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetManagedPointerTypeName(Microsoft.Cci.IManagedPointerTypeReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to a source expression that would bind to the given managed pointer when appearing in an appropriate context.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetModifiedTypeName(Microsoft.Cci.IModifiedTypeReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to a source expression that would bind to the given modified type when appearing in an appropriate context.
            C# does not actually have such an expression, but the components of this made up expression corresponds to C# syntax.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetNamespaceTypeName(Microsoft.Cci.INamespaceTypeReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the given type definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetNamespaceName(Microsoft.Cci.IUnitSetNamespace,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the given unit set namespace definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetNamespaceName(Microsoft.Cci.IUnitNamespaceReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the given referenced namespace definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetNestedTypeName(Microsoft.Cci.INestedTypeReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the given type definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetPointerTypeName(Microsoft.Cci.IPointerTypeReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the given type definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetTypeName(Microsoft.Cci.ITypeReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to the given type definition and that conforms to the specified formatting options.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetTypeKind(Microsoft.Cci.ITypeReference)">
            <summary>
            Returns a C#-like string that identifies the kind of the given type definition. For example, "class" or "delegate".
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetFunctionPointerTypeName(Microsoft.Cci.IFunctionPointerTypeReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to a source expression that would bind to the given funcion pointer type instance when appearing in an appropriate context,
            if course, C# actually had a function pointer type.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.TypeNameFormatter.GetGenericTypeInstanceName(Microsoft.Cci.IGenericTypeInstanceReference,Microsoft.Cci.NameFormattingOptions)">
            <summary>
            Returns a C#-like string that corresponds to a source expression that would bind to the given generic type instance when appearing in an appropriate context.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.UnitHelper">
            <summary>
            Class containing helper routines for Units
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitHelper.GetAssemblyIdentity(System.Reflection.AssemblyName,Microsoft.Cci.IMetadataHost)">
            <summary>
            Returns the Assembly identity for the assembly name.
            </summary>
            <param name="assemblyName"></param>
            <param name="metadataHost"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.UnitHelper.GetAssemblyIdentity(Microsoft.Cci.IAssembly)">
            <summary>
            Allocates an object that identifies a .NET assembly, using the IAssembly object
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.Cci.UnitHelper.GetModuleIdentity(Microsoft.Cci.IModule)">
            <summary>
            Constructs module identity for the given module
            </summary>
            <param name="module">Module for which the identity is desired.</param>
            <returns>The module identity corresponding to the passed module.</returns>
        </member>
        <member name="M:Microsoft.Cci.UnitHelper.ComputePublicKeyToken(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Computes the public key token for the given public key
            </summary>
            <param name="publicKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.UnitHelper.StrongName(Microsoft.Cci.IAssemblyReference)">
            <summary>
            Computes the string representing the strong name of the given assembly reference.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitHelper.FindType(Microsoft.Cci.INameTable,Microsoft.Cci.IModule,System.String)">
            <summary>
            Finds a type in the given module using the given type name, expressed in C# notion with dots separating both namespaces and types.
            If no such type can be found Dummy.NamespaceTypeDefinition is returned.
            </summary>
            <param name="nameTable">The table used to intern name strings.</param>
            <param name="module">The module to search for the type.</param>
            <param name="typeName">A string containing the fully qualified type name, using C# formatting conventions.</param>
        </member>
        <member name="M:Microsoft.Cci.UnitHelper.FindResourceNamed(Microsoft.Cci.IAssembly,Microsoft.Cci.IName)">
            <summary>
            Searches for the resource with given name in the given assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitHelper.AssembliesAreEquivalent(Microsoft.Cci.IAssemblyReference,Microsoft.Cci.IAssemblyReference)">
            <summary>
            Returns true if the given two assembly references are to be considered equivalent.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitHelper.ModulesAreEquivalent(Microsoft.Cci.IModuleReference,Microsoft.Cci.IModuleReference)">
            <summary>
            Returns true if the given two module references are to be considered equivalent.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitHelper.UnitsAreEquivalent(Microsoft.Cci.IUnitReference,Microsoft.Cci.IUnitReference)">
            <summary>
            Returns true if the given two unit references are to be considered equivalent.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitHelper.UnitsAreContainmentEquivalent(Microsoft.Cci.IUnitReference,Microsoft.Cci.IUnitReference)">
            <summary>
            Returns true if the given two unit references are to be considered equivalent as containers.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitHelper.UnitNamespacesAreEquivalent(Microsoft.Cci.IUnitNamespaceReference,Microsoft.Cci.IUnitNamespaceReference)">
            <summary>
            Returns true if the given two unit namespaces are to be considered equivalent as containers.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.UnitSet">
            <summary>
            A set of units that all contribute to a unified root namespace. For example the set of assemblies referenced by a C# project.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Cci.IUnit})">
            <summary>
            Constructs a unit set made up of the given (non empty) list of units.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitSet.Contains(Microsoft.Cci.IUnit)">
            <summary>
            Determines if the given unit belongs to this set of units.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.UnitSet.Units">
            <summary>
            Enumerates the units making up this set of units.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.UnitSet.UnitSetNamespaceRoot">
            <summary>
            A unified root namespace for this set of units. It contains nested namespaces as well as top level types and anything else that implements INamespaceMember.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.AggregatedNamespace`2">
             <summary>
            
             </summary>
             <typeparam name="ContainerType"></typeparam>
             <typeparam name="ContainerMemberType"></typeparam>
        </member>
        <member name="M:Microsoft.Cci.AggregatedNamespace`2.#ctor(Microsoft.Cci.IName)">
             <summary>
            
             </summary>
             <param name="name"></param>
        </member>
        <member name="P:Microsoft.Cci.AggregatedNamespace`2.Name">
             <summary>
            
             </summary>
        </member>
        <member name="P:Microsoft.Cci.AggregatedNamespace`2.RootOwner">
             <summary>
            
             </summary>
        </member>
        <member name="P:Microsoft.Cci.AggregatedNamespace`2.Locations">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Cci.AggregatedNamespace`2.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(T) method where T is the most derived object model node interface type implemented by the concrete type
            of the object implementing IDoubleDispatcher. The dispatch method does not invoke Dispatch on any child objects. If child traversal
            is desired, the implementations of the Visit methods should do the subsequent dispatching.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.AggregatedNamespace`2.Attributes">
            <summary>
            A collection of metadata custom attributes that are associated with this definition.
            </summary>
        </member>
        <member name="T:Microsoft.Cci.AggregatedScope`3">
            <summary>
            A scope whose members are aggregations of the members of a collection of "containers". For example, a symbol table type definition whose members
            are the aggregations of the members of a collection of source type declarations.
            </summary>
            <typeparam name="ScopeMemberType">The base type for members of the aggregated scope. For example ITypeDefinitionMember.</typeparam>
            <typeparam name="ContainerType">The type of container that provides the members (or parts of members) for this scope. For example ITypeDeclaration.</typeparam>
            <typeparam name="ContainerMemberType">The base type for members supplied by the container. For example ITypeDeclarationMember.</typeparam>
        </member>
        <member name="M:Microsoft.Cci.AggregatedScope`3.AddContainerMemberToCache(`2)">
            <summary>
            Takes a container member, gets a corresponding aggregated member for it and adds the latter to the member collection of this scope (if necessary).
            Usually, the container member is added to the declarations collection of the aggregated member. This behavior is overridable. See GetAggregatedMember.
            </summary>
            <param name="member">The container member to aggregate. The aggregation gets cached and shows up in the Members collection of this scope.</param>
        </member>
        <member name="M:Microsoft.Cci.AggregatedScope`3.AddContainer(`1)">
            <summary>
            Adds all of the members of the given container to this scope, after aggregating the members with members from other containers.
            </summary>
            <param name="container">A collection of members to aggregate with members from other containers and add to the members collection of this scope.</param>
        </member>
        <member name="M:Microsoft.Cci.AggregatedScope`3.GetAggregatedMember(`2)">
            <summary>
            Finds or creates an aggregated member instance corresponding to the given member. Usually this should result in the given member being added to the declarations
            collection of the aggregated member.
            </summary>
            <param name="member">The member to aggregate.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.RootUnitSetNamespace">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Cci.RootUnitSetNamespace.#ctor(Microsoft.Cci.IName,Microsoft.Cci.UnitSet)">
             <summary>
            
             </summary>
             <param name="name"></param>
             <param name="unitSet"></param>
        </member>
        <member name="M:Microsoft.Cci.RootUnitSetNamespace.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(IRootUnitSetNamespace) method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.RootUnitSetNamespace.ToString">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.UnitSetNamespace">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitSetNamespace.#ctor(Microsoft.Cci.IName,Microsoft.Cci.UnitSet)">
             <summary>
            
             </summary>
             <param name="name"></param>
             <param name="unitSet"></param>
        </member>
        <member name="M:Microsoft.Cci.UnitSetNamespace.#ctor(Microsoft.Cci.IName,Microsoft.Cci.IUnitSet,System.Collections.Generic.List{Microsoft.Cci.IUnitNamespace})">
             <summary>
            
             </summary>
             <param name="name"></param>
             <param name="unitSet"></param>
             <param name="nestedUnitNamespaces"></param>
        </member>
        <member name="P:Microsoft.Cci.UnitSetNamespace.Locations">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Cci.UnitSetNamespace.GetAggregatedMember(Microsoft.Cci.INamespaceMember)">
             <summary>
            
             </summary>
             <param name="member"></param>
             <returns></returns>
        </member>
        <member name="P:Microsoft.Cci.UnitSetNamespace.RootOwner">
             <summary>
            
             </summary>
        </member>
        <member name="P:Microsoft.Cci.UnitSetNamespace.UnitNamespaces">
             <summary>
            
             </summary>
        </member>
        <member name="P:Microsoft.Cci.UnitSetNamespace.UnitSet">
             <summary>
            
             </summary>
        </member>
        <member name="T:Microsoft.Cci.NestedUnitSetNamespace">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Cci.NestedUnitSetNamespace.Dispatch(Microsoft.Cci.IMetadataVisitor)">
            <summary>
            Calls the visitor.Visit(INestedUnitSetNamespace) method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.NestedUnitSetNamespace.InitializeIfNecessary">
             <summary>
            
             </summary>
        </member>
        <member name="P:Microsoft.Cci.NestedUnitSetNamespace.ContainingNamespace">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Cci.NestedUnitSetNamespace.ToString">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="P:Microsoft.Cci.NestedUnitSetNamespace.ContainingScope">
             <summary>
            
             </summary>
        </member>
        <member name="P:Microsoft.Cci.NestedUnitSetNamespace.Container">
             <summary>
            
             </summary>
        </member>
        <member name="P:Microsoft.Cci.NestedUnitSetNamespace.ContainingUnitSetNamespace">
             <summary>
            
             </summary>
        </member>
        <member name="T:Microsoft.Cci.MemoryMappedFile">
            <summary>
            Class representing the unmanaged memory mapped file. This can be used to open the file as memory mapped file and get the pointer to the buffer of file content.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MemoryMappedFile.Finalize">
            <summary>
            Finalizer for the Memory mapped file. Calls the CloseMap.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.MemoryMappedFile.CreateMemoryMappedFile(System.String,Microsoft.Cci.IBinaryDocument)">
            <summary>
            Factory method for opening the memory mapped file. The content of the map is assumed to come from localFileName.
            This can throw FileLoadException in case of error.
            </summary>
            <param name="localFileName">Name of the file from where the binary document needs to be opened.
            This is useful in case we want to copy the file to temporary location and then open or when we want to open document on the network.</param>
            <param name="binaryDocument">The binary document for which the memory mapping is requested.</param>
        </member>
        <member name="T:Microsoft.Cci.UnmanagedBinaryMemoryBlock">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnmanagedBinaryMemoryBlock.Finalize">
            <summary>
            Destructor for UnmanagedBinaryMemoryBlock
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UnmanagedBinaryMemoryBlock.CreateUnmanagedBinaryMemoryBlock(System.String,Microsoft.Cci.IBinaryDocument)">
            <summary>
            Factory method for opening the memory mapped file. The content of the map is assumed to come from localFileName.
            This can throw FileLoadException in case of error.
            </summary>
            <param name="localFileName"></param>
            <param name="binaryDocument"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.BinaryDocument">
            <summary>
            Class representing a binary document
            </summary>
        </member>
        <member name="M:Microsoft.Cci.BinaryDocument.#ctor(System.String,Microsoft.Cci.IName,System.UInt32)">
            <summary>
            Constructor for the Binay Document.
            </summary>
            <param name="location"></param>
            <param name="name"></param>
            <param name="length"></param>
        </member>
        <member name="M:Microsoft.Cci.BinaryDocument.GetBinaryDocumentForFile(System.String,Microsoft.Cci.IMetadataHost)">
            <summary>
            Static factory method for getting the Binary document given full file path. Note this reads the file on the disk hence can throw some of the IO exceptions.
            </summary>
            <param name="fullFilePath"></param>
            <param name="compilationHost"></param>
        </member>
        <member name="T:Microsoft.Cci.BinaryLocation">
            <summary>
            Class representing the Binary location.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.BinaryLocation.#ctor(Microsoft.Cci.IBinaryDocument,System.UInt32)">
            <summary>
            Constructor for the Binary location
            </summary>
            <param name="binaryDocument"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Microsoft.Cci.BinaryLocation.Equals(System.Object)">
            <summary>
            Compares the equality of two locations.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.BinaryLocation.GetHashCode">
            <summary>
            Gives the hash code of the location
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.BinaryLocation.ToString">
            <summary>
            Gives the string representing the location
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.ILLocation">
            <summary>
            Class representing the location in IL stream.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.ILLocation.#ctor(Microsoft.Cci.IBinaryDocument,Microsoft.Cci.IMethodDefinition,System.UInt32)">
            <summary>
            Constructor for IL location
            </summary>
            <param name="binaryDocument"></param>
            <param name="methodDefinition"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Microsoft.Cci.ILLocation.Equals(System.Object)">
            <summary>
            Compares the equality of two locations.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.ILLocation.GetHashCode">
            <summary>
            Gives the hash code of the location
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.ILLocation.ToString">
            <summary>
            Gives the string representing the location
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1">
            <summary>
            Hashtable that can host multiple values for the same uint key.
            </summary>
            <typeparam name="InternalT"></typeparam>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.#ctor">
            <summary>
            Constructor for MultiHashtable
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.#ctor(System.UInt32)">
            <summary>
            Constructor for MultiHashtable
            </summary>
        </member>
        <member name="P:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.Count">
            <summary>
            Count of elements in MultiHashtable
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.Add(System.UInt32,`0)">
            <summary>
            Add element to MultiHashtable
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.Contains(System.UInt32,`0)">
            <summary>
            Checks if key and value is present in the MultiHashtable
            </summary>
        </member>
        <member name="T:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.KeyedValuesEnumerator">
            <summary>
            Enumerator to enumerate values with given key.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.KeyedValuesEnumerator.Current">
            <summary>
            Get the current element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.KeyedValuesEnumerator.MoveNext">
            <summary>
            Move to next element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.KeyedValuesEnumerator.Reset">
            <summary>
            Reset the enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.KeyedValuesEnumerable">
            <summary>
            Enumerable to enumerate values with given key.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.KeyedValuesEnumerable.GetEnumerator">
            <summary>
            Return the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.GetValuesFor(System.UInt32)">
            <summary>
            Enumeration to return all the values associated with the given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.ValuesEnumerator">
            <summary>
            Enumerator to enumerate all values.
            </summary>
        </member>
        <member name="P:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.ValuesEnumerator.Current">
            <summary>
            Get the current element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.ValuesEnumerator.MoveNext">
            <summary>
            Move to next element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.ValuesEnumerator.Reset">
            <summary>
            Reset the enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.ValuesEnumerable">
            <summary>
            Enumerable to enumerate all values.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.ValuesEnumerable.GetEnumerator">
            <summary>
            Return the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Cci.UtilityDataStructures.MultiHashtable`1.Values">
            <summary>
            Enumeration of all the values
            </summary>
        </member>
        <member name="T:Microsoft.Cci.UtilityDataStructures.Hashtable`1">
            <summary>
            Hashtable that can hold only single value per uint key.
            </summary>
            <typeparam name="InternalT"></typeparam>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable`1.#ctor">
            <summary>
            Constructor for Hashtable
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable`1.#ctor(System.UInt32)">
            <summary>
            Constructor for Hashtable
            </summary>
        </member>
        <member name="P:Microsoft.Cci.UtilityDataStructures.Hashtable`1.Count">
            <summary>
            Number of elements
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable`1.Add(System.UInt32,`0)">
            <summary>
            Add element to the Hashtable
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable`1.Find(System.UInt32)">
            <summary>
            Find element in the Hashtable
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.UtilityDataStructures.Hashtable`1.ValuesEnumerator">
            <summary>
            Enumerator for elements
            </summary>
        </member>
        <member name="P:Microsoft.Cci.UtilityDataStructures.Hashtable`1.ValuesEnumerator.Current">
            <summary>
            Current element
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable`1.ValuesEnumerator.MoveNext">
            <summary>
            Move to next element
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable`1.ValuesEnumerator.Reset">
            <summary>
            Reset the enumerator
            </summary>
        </member>
        <member name="T:Microsoft.Cci.UtilityDataStructures.Hashtable`1.ValuesEnumerable">
            <summary>
            Enumerable for elements
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable`1.ValuesEnumerable.GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Cci.UtilityDataStructures.Hashtable`1.Values">
            <summary>
            Enumerable of all the values
            </summary>
        </member>
        <member name="T:Microsoft.Cci.UtilityDataStructures.Hashtable">
            <summary>
            Hashtable that can hold only single uint value per uint key.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable.#ctor">
            <summary>
            Constructor for Hashtable
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable.#ctor(System.UInt32)">
            <summary>
            Constructor for Hashtable
            </summary>
        </member>
        <member name="P:Microsoft.Cci.UtilityDataStructures.Hashtable.Count">
            <summary>
            Number of elements
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable.Add(System.UInt32,System.UInt32)">
            <summary>
            Add element to the Hashtable
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable.Find(System.UInt32)">
            <summary>
            Find element in the Hashtable
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Microsoft.Cci.UtilityDataStructures.Hashtable.ValuesEnumerator">
            <summary>
            Enumerator for elements
            </summary>
        </member>
        <member name="P:Microsoft.Cci.UtilityDataStructures.Hashtable.ValuesEnumerator.Current">
            <summary>
            Current element
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable.ValuesEnumerator.MoveNext">
            <summary>
            Move to next element
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable.ValuesEnumerator.Reset">
            <summary>
            Reset the enumerator
            </summary>
        </member>
        <member name="T:Microsoft.Cci.UtilityDataStructures.Hashtable.ValuesEnumerable">
            <summary>
            Enumerable for elements
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.Hashtable.ValuesEnumerable.GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Cci.UtilityDataStructures.Hashtable.Values">
            <summary>
            Enumerable of all the values
            </summary>
        </member>
        <member name="T:Microsoft.Cci.UtilityDataStructures.DoubleHashtable">
            <summary>
            Hashtable that has two uints as its key. Its value is also uint
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.DoubleHashtable.#ctor">
            <summary>
            Constructor for DoubleHashtable
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.DoubleHashtable.#ctor(System.UInt32)">
            <summary>
            Constructor for DoubleHashtable
            </summary>
        </member>
        <member name="P:Microsoft.Cci.UtilityDataStructures.DoubleHashtable.Count">
            <summary>
            Count of elements
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.DoubleHashtable.Add(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Add element to the Hashtable
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.DoubleHashtable.Find(System.UInt32,System.UInt32)">
            <summary>
            Fine element in the Hashtable
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Cci.UtilityDataStructures.DoubleHashtable`1">
            <summary>
            Hashtable that has two uints as its key.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.DoubleHashtable`1.#ctor">
            <summary>
            Constructor for DoubleHashtable
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.DoubleHashtable`1.#ctor(System.UInt32)">
            <summary>
            Constructor for DoubleHashtable
            </summary>
        </member>
        <member name="P:Microsoft.Cci.UtilityDataStructures.DoubleHashtable`1.Count">
            <summary>
            Count of elements
            </summary>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.DoubleHashtable`1.Add(System.UInt32,System.UInt32,`0)">
            <summary>
            Add element to the DoubleHashtable
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Cci.UtilityDataStructures.DoubleHashtable`1.Find(System.UInt32,System.UInt32)">
            <summary>
            Find element in DoubleHashtable
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
    </members>
</doc>
